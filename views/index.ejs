<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8' />
    <title>My Gym Locator</title>
    <!-- <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /> -->
    <meta name='viewport' content='width=device-width, intial-scale=1.0'/>
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' rel='stylesheet'/>
    <link rel="stylesheet" href="/css/style.css"/>
    <link rel="stylesheet" href="/css/responsiveness.css"/>
</head>

<body>
    <div class="col-3 sidebar">
        <div class="heading">
            <h4>Find your gym!</h4>
        </div>
        <div class="filters-container">
            <div id="filters">
                <button class="filter-button active" id="filter-button-all" onclick="filterRegion('all');">All</button>
            </div>
            <div>
                <!-- <h6>Today's (<em id="today-date"></em>) opening hours:</h6> -->

                <h6>
                    <div id='date-filter' class="date-filter">
                        <button id='today-date' class="dropbtn"></button>
                        <div id='date-filter-content' class="date-filter-content"></div>
                    </div>
                    opening hours:
                </h6>
                <h6 style="display:inline-flex;">Opening: <em id='text-opening'>All</em>
                    <input id='slider-opening' type="range" min="0" max="1440" value="720" step="30" oninput="filterTime();">
                </h6>
                <h6 style="display:inline-flex;">Closing: <em id='text-closing'>All</em>
                    <input id='slider-closing' type="range" min="0" max="1440" value="720" step="30" oninput="filterTime();">
                </h6>
            </div>
        </div>

        <div class="listings" id="listings"></div>
    </div>
    <div id="map" class="col-9 map"></div>

    <script>
        // Define some constants and helper functions
        // Old browsers compatibility
        if (!("remove" in Element.prototype)) {
            Element.prototype.remove = function() {
                if (this.parentNode) {
                    this.parentNode.removeChild(this);
                }
            };
        }
        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    </script>

    <script>
        mapboxgl.accessToken = <%- mapbox_api_key %>;

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11?optimize=true',
            center: [18.070, 59.322],   // Center it on Stockholm, Sweden
            zoom: 10,
            customAttribution: "<span style=\"color:#404040;\">Made with <3 by <a style=\"text-decoration: underline;\" href=\"https://redouane-dev.github.io/\" target=\"_blank\">Redouane Achouri</a></span>"
        });

        // Add zoom and rotation controls to the map.
        map.addControl(new mapboxgl.NavigationControl());

        map.on('load', function () {
            window.geojson = <%- data %>;

            // Setup today's date in the filter panel
            window.dow = new Date().getDay();
            document.getElementById('today-date').innerText = daysOfWeek[window.dow];

            populateDaysDropList();

            map.addSource('centers', {
                "type": "geojson",
                "data": window.geojson,
            });

            // Populate the map with markers
            populateMap();

            // Add the listing
            buildCentersList();

            // Change the cursor to a pointer when the mouse is over the centers layer.
            map.on('mouseenter', 'centers', function () {
                map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'centers', function () {
                map.getCanvas().style.cursor = '';
            });
        });
    </script>

    <script>
        function populateMap() {
            window.geojson['features'].forEach((feature, idx) => {

                let region = feature['properties']['region'].split(/\s/)[0].trim();

                // Create a div element for the marker
                let el = document.createElement('div');
                el.id = 'marker-' + idx;
                el.classList.add('marker');
                el.classList.add(region);

                // By the image for the marker will be anchored by its center. We'll adjust accordingly
                new mapboxgl.Marker(el, { offset: [0, -14] })
                    .setLngLat(feature['geometry']['coordinates'])
                    .addTo(map);

                el.addEventListener('click', (e) => {
                    // Fly the point associated with the clicked link
                    flyToCenter(feature);
                    // Close all popups and display popup for the clicked store
                    createPopUp(feature);
                    // Highlight listing in sidebar and remove highlighting for other listings
                    e.stopPropagation();
                    let activeListings = document.querySelectorAll('.listing, .active');
                    Array.prototype.forEach.call(activeListings, (listing) => listing.classList.remove('active'));

                    let listing = document.getElementById('listing-' + idx);
                    listing.classList.add('active');
                });
            });
        }

        function buildCentersList() {
            // Get the listing DOM element
            let listings = document.getElementById('listings');
            let filters = document.getElementById('filters');

            // Transform the list of centers (elements) into map markers
            window.geojson['features'].forEach((feature, idx) => {

                // Store the region name for later use it to filter centers by region (Stockholm, Oslo, ...)
                let region = feature['properties']['region'].split(/\s/)[0].trim();

                // Create an HTML div container with class 'listing' for each center
                let listing = listings.appendChild(document.createElement('div'));
                listing.id = 'listing-' + idx;
                listing.classList.add('listing');
                listing.classList.add(region);

                // Create a link with class 'title' for each center and fill it with the center name
                let title = listing.appendChild(document.createElement('a'));
                title.href = '#';
                title.className = 'title';
                title.dataPosition = idx;
                title.innerHTML = feature['properties']['title'];
                title.addEventListener('click', (e) => {
                    // Update the currentCenter to the center associated with the clicker link
                    let clickedListing = feature;

                    // Fly the point associated with the clicked link
                    flyToCenter(clickedListing);

                    // Close all popups and display popup for the clicked store
                    createPopUp(clickedListing);

                    // Highlight listing in sidebar and remove highlighting for other listings
                    let activeListings = document.querySelectorAll('.listing, .active');
                    Array.prototype.forEach.call(activeListings, (listing) => listing.classList.remove('active'));

                    title.parentNode.classList.add('active');    // Make the whole parent (not only the actual title) active
                });

                // Create a div with class 'details' for storing misc information
                let details = listing.appendChild(document.createElement('div'));
                // details.innerHTML = "<a href='" + feature['properties']['url'] + "' target='_blank'>Link</a>";
                details.innerHTML = `<a href='${feature['properties']['url']}' target='_blank'>Link</a>`;

                // Create filter buttons
                if (document.getElementById(region) === null) {
                    let filterButton = document.createElement('button');
                    filterButton.id = region;
                    filterButton.classList.add('filter-button');

                    // Set the button text to first letter upper case
                    filterButton.innerText = region[0].toUpperCase() + region.slice(1);
                    filterButton.onclick = () => filterRegion(region, filterButton);
                    filters.appendChild(filterButton);
                }
            });
        }

        function flyToCenter(currentCenter) {
            map.flyTo({
                center: currentCenter['geometry']['coordinates'],
                zoom: 15,
                speed: 5,
                curve: 1
            });
        }

        function createPopUp(currentCenter) {
            // Delete previous popups
            let popUps = document.getElementsByClassName('mapboxgl-popup');
            if (popUps[0]) popUps[0].remove();

            // Create new popup
            let popup = new mapboxgl.Popup({ closeOnClick: false })
                .setLngLat(currentCenter['geometry']['coordinates'])
                .setHTML(currentCenter['properties']['description'])
                .addTo(map);
        }

        function _minutes2str(num) {
            // Formats number of minutes to 'HH:MM'
            let hours = Math.floor(num / 60);
            let minutes = num % 60;

            // Make sure returned numbers are 2 digits (padding with 0 at the left)
            hours = hours.toString().padStart(2, '0');
            minutes = minutes.toString().padStart(2, '0');

            return `${hours}:${minutes}`;
        }

        // function filterTime(data, timeStart = null, timeEnd = null) {
        function filterTime() {

            let timeStart = Number.parseInt(document.getElementById('slider-opening').value);
            let timeEnd = Number.parseInt(document.getElementById('slider-closing').value);

            document.getElementById('text-opening').innerText = _minutes2str(timeStart);
            document.getElementById('text-closing').innerText = _minutes2str(timeEnd);

            // As the data from the gym's website is formatted to start the week on
            // mondays (monday -> 0 ... sunday -> 6), we need
            // to increment dow by 1, while keeping into perspective the 0 to 6 range
            dow = (window.dow + 6) % 7;

            // // Expected time format is minutes
            // if (timeStart === null) timeStart = Number.POSITIVE_INFINITY;
            // if (timeEnd === null) timeEnd = Number.NEGATIVE_INFINITY;

            window.geojson['features'].forEach((feature, idx) => {
                let todayOpeningHours = feature['properties']['openingHours'][dow]

                if (todayOpeningHours[0] > timeStart || todayOpeningHours[1] < timeEnd) {
                    document.getElementById('marker-' + idx).style.display = 'none';
                    document.getElementById('listing-' + idx).style.display = 'none';
                } else {
                    document.getElementById('marker-' + idx).style.display = 'block';
                    document.getElementById('listing-' + idx).style.display = 'block';
                }
            });
        }

        function filterRegion(region, button = null) {

            // Set all the buttons to not 'active'
            let activeButtons = document.querySelectorAll('.filter-button, .active');
            Array.prototype.forEach.call(activeButtons, (button) => button.classList.remove('active'));

            // Set the pressed button to active
            if (button !== null) {
                button.classList.add('active');
            } else if (region === 'all') {
                document.getElementById('filter-button-all').classList.add('active');
            }

            if (region === 'all') {
                let markers = document.getElementsByClassName('marker');
                // Iterate over the NodeList returned by the function 'getElementsByClassName'
                Array.prototype.forEach.call(markers, (marker) => marker.style.display = 'block');
                
                let listings = document.getElementsByClassName('listing');
                Array.prototype.forEach.call(listings, (listing) => listing.style.display = 'block');
            } else {
                let markers = document.getElementsByClassName('marker');
                
                // Iterate over the NodeList returned by the function 'getElementsByClassName'
                Array.prototype.forEach.call(markers, function(marker) {
                    // Hide all the other markers
                    if (! marker.classList.contains(region)) marker.style.display = 'none';
                    // and show only the one selected 
                    else marker.style.display = 'block';
                });
                
                let listings = document.getElementsByClassName('listing');
                Array.prototype.forEach.call(listings, function(listing) {
                    // Hide all the other markers
                    if (! listing.classList.contains(region)) listing.style.display = 'none';
                    // and show only the one selected 
                    else listing.style.display = 'block';
                });
            }
        }

        function populateDaysDropList() {

            // Remove the list and recreate an empty one
            document.getElementById('date-filter-content').remove()
            // Recreate
            let dropList = document.createElement('div')
            dropList.id = 'date-filter-content';
            dropList.className = "date-filter-content";
            // Append to parent element
            document.getElementById('date-filter').appendChild(dropList);

            // Fill-up the drop button of days of week.
            // The mathematical principle is simple: We add 7 to today's day of week, then
            // we substract numbers from 1 to 6 to get the remaining days of week, while keeping
            // using modulo % to get a number between 0 and 6
            let todayDow = window.dow + 7;
            for (let idx = 1; idx <= 6; idx++) {
                dow = (todayDow - idx) % 7;

                let a = document.createElement('a');
                a.href = '#';

                a.innerText = daysOfWeek[dow];
                a.onclick = () => {
                    window.dow = dow;
                    document.getElementById('today-date').innerText = daysOfWeek[window.dow];
                    populateDaysDropList();
                    filterTime();
                };

                document.getElementById('date-filter-content').appendChild(a);
            }
        }
    </script>

</body>

</html>