<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8' />
    <title>My Gym Locator</title>
    <!-- <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /> -->
    <meta name='viewport' content='width=device-width, intial-scale=1.0'/>
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' rel='stylesheet'/>
    <link rel="stylesheet" href="/css/style.css"/>
    <link rel="stylesheet" href="/css/responsiveness.css"/>
</head>

<body>
    <div class="col-2 sidebar">
        <div class="heading">
            <h4>Centers</h4>
        </div>
        <dif class="filters">
            
        </dif>
        <div id="listings" class="listings"></div>
    </div>
    <div id="map" class="col-10 map"></div>

    <script>
        // Old browsers compatibility
        if (!("remove" in Element.prototype)) {
            Element.prototype.remove = function() {
                if (this.parentNode) {
                    this.parentNode.removeChild(this);
                }
            };
        }
    </script>

    <script>
        mapboxgl.accessToken = <%- mapbox_api_key %>;

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11?optimize=true',
            center: [18.070, 59.322],   // Center it on Stockholm, Sweden
            zoom: 10,
            customAttribution: "<span style=\"color:#404040;\">Made with <3 by <a style=\"text-decoration: underline;\" href=\"https://redouane-dev.github.io/\" target=\"_blank\">Redouane Achouri</a></span>"
        });

        // Add zoom and rotation controls to the map.
        map.addControl(new mapboxgl.NavigationControl());

        map.on('load', function () {
            let jsonData = <%- data %>;

            map.addSource('centers', {
                "type": "geojson",
                "data": jsonData,
            });

            // Populate the map with markers
            populateMap(jsonData['features']);

            // Add the listing
            buildCentersList(jsonData['features']);

            // Change the cursor to a pointer when the mouse is over the centers layer.
            map.on('mouseenter', 'centers', function () {
                map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'centers', function () {
                map.getCanvas().style.cursor = '';
            });
        });
    </script>

    <script>
        function populateMap(data) {
            data.forEach((feature, idx) => {
                // Create a div element for the marker
                let el = document.createElement('div');
                // el.className = "marker";
                el.classList.add('marker');
                // By the image for the marker will be anchored by its center. We'll adjust accordingly
                new mapboxgl.Marker(el, { offset: [0, -14] })
                    .setLngLat(feature['geometry']['coordinates'])
                    .addTo(map);

                el.addEventListener('click', (e) => {
                    // Fly the point associated with the clicked link
                    flyToCenter(feature);
                    // Close all popups and display popup for the clicked store
                    createPopUp(feature);
                    // Highlight listing in sidebar and remove highlighting for other listings
                    e.stopPropagation();
                    let activeItem = document.getElementsByClassName('active');
                    if (activeItem[0]) {
                        activeItem[0].classList.remove('active');
                    }
                    let listing = document.getElementById('listing-' + idx);
                    listing.classList.add('active');
                });
            });
        }

        function buildCentersList(data) {
            // Get the listing DOM element
            let listings = document.getElementById('listings');

            // Transform the list of centers (elements) into map markers
            data.forEach((elem, idx) => {

                // Create an HTML div container with class 'item' for each center
                let listing = listings.appendChild(document.createElement('div'));
                listing.className = 'item';
                listing.id = 'listing-' + idx;

                // Create a link with class 'title' for each center and fill it with the center name
                let title = listing.appendChild(document.createElement('a'));
                title.href = '#';
                title.className = 'title';
                title.dataPosition = idx;
                title.innerHTML = elem['properties']['title'];
                title.addEventListener('click', (e) => {
                    // Update the currentCenter to the center associated with the clicker link
                    let clickedListing = elem;

                    // Fly the point associated with the clicked link
                    flyToCenter(clickedListing);

                    // Close all popups and display popup for the clicked store
                    createPopUp(clickedListing);

                    // Highlight listing in sidebar and remove highlighting for other listings
                    let activeItem = document.getElementsByClassName('active');
                    if (activeItem[0]) {
                        activeItem[0].classList.remove('active');
                    }
                    title.parentNode.classList.add('active');    // Make the whole parent (not only the actual title) active
                });

                // Create a div with class 'details' for storing misc information
                let details = listing.appendChild(document.createElement('div'));
                // details.innerHTML = "<a href='" + elem['properties']['url'] + "' target='_blank'>Link</a>";
                details.innerHTML = `<a href='${elem['properties']['url']}' target='_blank'>Link</a>`;
            });
        }

        function flyToCenter(currentCenter) {
            map.flyTo({
                center: currentCenter['geometry']['coordinates'],
                zoom: 15
            });
        }

        function createPopUp(currentCenter) {
            // Delete previous popups
            let popUps = document.getElementsByClassName('mapboxgl-popup');
            if (popUps[0]) popUps[0].remove();

            // Create new popup
            let popup = new mapboxgl.Popup({ closeOnClick: false })
                .setLngLat(currentCenter['geometry']['coordinates'])
                .setHTML(currentCenter['properties']['description'])
                .addTo(map);
        }
    </script>

</body>

</html>